#include <msp430.h> 
#include <stdint.h>
#include "uartstdio.h"

/**
 * main.c
 */

void initADC( )
{
    // Избери функцията на извод P9.2 като вход на АЦП (A10), MSP430FR6989 Datasheet (стр. 117-120)
    P9SEL0 ?= ???;
    P9SEL1 ?= ???;

    // Избери функцията на извод P9.3 като вход на АЦП (A11), MSP430FR6989 Datasheet (стр. 117-120)
    P9SEL0 ?= ???;
    P9SEL1 ?= ???;

    ADC12CTL0 &= ~ADC12ENC;         // Забрани преобразуването, ENC = 0
    ADC12CTL0 |= ADC12ON;           // Включи АЦП
    ADC12CTL0 |= ADC12SHT1_15;      // Избери Sample-and-hold време = 512 такта на АЦП-то за
                                    // канали 8 - 23

    ADC12CTL0 |= ADC12MSC;          // Автоматично ресетиране на SH таймера след всяко
                                    // преобразуване

    ADC12CTL1 |= ADC12SSEL_2;       // Избери MCLK за тактов сигнал
    ADC12CTL1 |= ADC12SHP;          // Използвай sampling таймера
    ADC12CTL1 |= ADC12CONSEQ_1;     // Избери режим "много канали, по едно измерване на всеки"
    ADC12CTL1 |= ADC12PDIV_0;       // Раздели тактовия сигнал на 1
    ADC12CTL1 |= ADC12DIV_1;        // Раздели тактовия сигнал на 2 (от втория делител)
    ADC12CTL1 &= ~ADC12ISSH;        // Не инвертирай sample-and-hold сигнала
    ADC12CTL1 |= ADC12SHS_0;        // Използвай ADC12SC бита като сигнал за начало на sample-
                                    // and-hold
    ADC12CTL2 &= ~ADC12DF;          // Формат на резултата - прав код
    ADC12CTL2 &= ~ADC12RES_3;       // Занули битовете за разредността
    ADC12CTL2 |= ???;               // Избери 12-битово преобразуване, MSP430FR6989 User Guide (стр. 897)

    //-------------------------MCTL конфигурация----------------------------------------------------------------------

    ADC12CTL3 |= ADC12CSTARTADD_10; // Избери регистър ADC12MEM10 да е приемник на
                                    // резултата от първото преобразуване

    // Конфигурирай измерването на потенциометъра
    ADC12MCTL10 &= ~ADC12DIF;       // Избери single-ended преобразуване
    ADC12MCTL10 |= ADC12VRSEL_0;    // Използвай Vdd за горен праг, Vss - за долен
    ADC12MCTL10 |= ADC12INCH_10;    // Избери A10 за входен канал
    ADC12MCTL10 &= ~ADC12EOS;       // Канал А10 не е крайният канал за преобразуване

    // Конфигурирай измерването на NTC резистора (термистора)
    while(REFCTL0 & REFGENBUSY);    // Провери дали REFGENBUSY е 1, ако ДА - изчакай
    REFCTL0 |=( ??? | REFON);       // Задай 2.5 V | Включи вътрешния еталон
    ADC12MCTL11 &= ~ADC12DIF;       // Избери single-ended преобразуване
    ADC12MCTL11 |= ???;             // Използвай Vref(буфериран) за горен праг, Vss - за долен, MSP430FR6989 User Guide (стр. 900)
    ADC12MCTL11 |= ADC12INCH_11;    // Избери A30 за входен канал
    ADC12MCTL11 &= ~ADC12EOS;       // Канал А30 не е крайният канал за преобразуване

    // Конфигурирай измерването на вътрешния резисторен делител (А31)
    ADC12CTL3 |= ADC12BATMAP;       // Избери вътрешния източник за канал A31
    ADC12MCTL31 &= ~ADC12DIF;       // Избери single-ended преобразуване
    ADC12MCTL31 |= ADC12VRSEL_0;    // Използвай Vdd за горен праг, Vss - за долен.
    ADC12MCTL31 |= ADC12INCH_31;    // Избери A31 за входен канал
    ADC12MCTL31 |= ADC12EOS;        // Канал А31 е крайният канал за преобразуване

//----------------------------------------------------------------------------------------------------------------------------

    ADC12CTL0 |= ADC12ENC;          // Установи ENC в 1
}

void main( void )
{
  unsigned long adc_samples[3];     // Тук ще се съхраняват резултатите от измерванията

  WDTCTL = WDTPW | WDTHOLD;
  PM5CTL0 &= ~LOCKLPM5;

  initADC();                        // Инициализирай АЦП-то
  UARTStdioInit();                  // Инициализирай UART модула и UARTprintf функцията

  while(1)
  {
      ADC12CTL0 |= ???;             // Започни измерванe, MSP430FR6989 User guide (стр. 893-894)
      while(ADC12CTL1 & ???){}

      adc_samples[0] =  ADC12MEM10;
      adc_samples[1] =  ADC12MEM11;
      adc_samples[2] =  ADC12MEM31;

      UARTprintf("Pot: %04d Tempr: %04d Vdiv: %04d \r", adc_samples[0], adc_samples[1], adc_samples[2]);

     __delay_cycles(1600000);
  }
}
